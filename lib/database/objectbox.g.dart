// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7938575165183010666),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(5, 4068334277409307719),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3282688965150026943),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8618601806348275898),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6622014805940202935),
            name: 'comments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6851644599544052513),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4068334277409307719),
            name: 'lastModified',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7835207445491077407),
      name: 'Daily',
      lastPropertyId: const obx_int.IdUid(5, 1051583418497647286),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1450955923707312623),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 9215854684122478864),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4336652831821502712),
            name: 'comments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7863802301125278495),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1051583418497647286),
            name: 'lastModified',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 608413763324779504),
      name: 'Person',
      lastPropertyId: const obx_int.IdUid(5, 7043700248612068072),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3708365933243236277),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 970670323929823636),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3651556534606107862),
            name: 'comments',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8091339238482682826),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7043700248612068072),
            name: 'lastModified',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 963539754092481015),
            name: 'traits',
            targetId: const obx_int.IdUid(4, 6373286858574820853))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6373286858574820853),
      name: 'Trait',
      lastPropertyId: const obx_int.IdUid(9, 5443126906040808065),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2024915720814845855),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5571812572448949965),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4192582187879458300),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4113220158938675222),
            name: 'red',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2124246612641076389),
            name: 'green',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7636193319676298526),
            name: 'blue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2214237730893181662),
            name: 'alpha',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 381023053710019502),
            name: 'sortOrder',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5443126906040808065),
            name: 'lastModified',
            type: 12,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 6373286858574820853),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 963539754092481015),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final commentsOffset = fbb.writeList(
              object.comments.map(fbb.writeString).toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, commentsOffset);
          fbb.addInt64(3, object.sortOrder);
          fbb.addInt64(4, object.lastModified.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Category(title: titleParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..comments = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 8, [])
            ..sortOrder =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..lastModified = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) /
                        1000)
                    .round());

          return object;
        }),
    Daily: obx_int.EntityDefinition<Daily>(
        model: _entities[1],
        toOneRelations: (Daily object) => [],
        toManyRelations: (Daily object) => {},
        getId: (Daily object) => object.id,
        setId: (Daily object, int id) {
          object.id = id;
        },
        objectToFB: (Daily object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final commentsOffset = fbb.writeList(
              object.comments.map(fbb.writeString).toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, commentsOffset);
          fbb.addInt64(3, object.sortOrder);
          fbb.addInt64(4, object.lastModified.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Daily(title: titleParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..comments = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 8, [])
            ..sortOrder =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..lastModified = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) /
                        1000)
                    .round());

          return object;
        }),
    Person: obx_int.EntityDefinition<Person>(
        model: _entities[2],
        toOneRelations: (Person object) => [],
        toManyRelations: (Person object) =>
            {obx_int.RelInfo<Person>.toMany(1, object.id): object.traits},
        getId: (Person object) => object.id,
        setId: (Person object, int id) {
          object.id = id;
        },
        objectToFB: (Person object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final commentsOffset = fbb.writeList(
              object.comments.map(fbb.writeString).toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, commentsOffset);
          fbb.addInt64(3, object.sortOrder);
          fbb.addInt64(4, object.lastModified.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Person(name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..comments = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 8, [])
            ..sortOrder =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..lastModified = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) /
                        1000)
                    .round());
          obx_int.InternalToManyAccess.setRelInfo<Person>(object.traits, store,
              obx_int.RelInfo<Person>.toMany(1, object.id));
          return object;
        }),
    Trait: obx_int.EntityDefinition<Trait>(
        model: _entities[3],
        toOneRelations: (Trait object) => [],
        toManyRelations: (Trait object) => {},
        getId: (Trait object) => object.id,
        setId: (Trait object, int id) {
          object.id = id;
        },
        objectToFB: (Trait object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addFloat64(3, object.red);
          fbb.addFloat64(4, object.green);
          fbb.addFloat64(5, object.blue);
          fbb.addFloat64(6, object.alpha);
          fbb.addInt64(7, object.sortOrder);
          fbb.addInt64(8, object.lastModified.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final redParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final greenParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final blueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final alphaParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = Trait(
              name: nameParam,
              description: descriptionParam,
              red: redParam,
              green: greenParam,
              blue: blueParam,
              alpha: alphaParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..sortOrder =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..lastModified = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0) /
                        1000)
                    .round());

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[0].properties[0]);

  /// See [Category.title].
  static final title =
      obx.QueryStringProperty<Category>(_entities[0].properties[1]);

  /// See [Category.comments].
  static final comments =
      obx.QueryStringVectorProperty<Category>(_entities[0].properties[2]);

  /// See [Category.sortOrder].
  static final sortOrder =
      obx.QueryIntegerProperty<Category>(_entities[0].properties[3]);

  /// See [Category.lastModified].
  static final lastModified =
      obx.QueryDateNanoProperty<Category>(_entities[0].properties[4]);
}

/// [Daily] entity fields to define ObjectBox queries.
class Daily_ {
  /// See [Daily.id].
  static final id = obx.QueryIntegerProperty<Daily>(_entities[1].properties[0]);

  /// See [Daily.title].
  static final title =
      obx.QueryStringProperty<Daily>(_entities[1].properties[1]);

  /// See [Daily.comments].
  static final comments =
      obx.QueryStringVectorProperty<Daily>(_entities[1].properties[2]);

  /// See [Daily.sortOrder].
  static final sortOrder =
      obx.QueryIntegerProperty<Daily>(_entities[1].properties[3]);

  /// See [Daily.lastModified].
  static final lastModified =
      obx.QueryDateNanoProperty<Daily>(_entities[1].properties[4]);
}

/// [Person] entity fields to define ObjectBox queries.
class Person_ {
  /// See [Person.id].
  static final id =
      obx.QueryIntegerProperty<Person>(_entities[2].properties[0]);

  /// See [Person.name].
  static final name =
      obx.QueryStringProperty<Person>(_entities[2].properties[1]);

  /// See [Person.comments].
  static final comments =
      obx.QueryStringVectorProperty<Person>(_entities[2].properties[2]);

  /// See [Person.sortOrder].
  static final sortOrder =
      obx.QueryIntegerProperty<Person>(_entities[2].properties[3]);

  /// See [Person.lastModified].
  static final lastModified =
      obx.QueryDateNanoProperty<Person>(_entities[2].properties[4]);

  /// see [Person.traits]
  static final traits =
      obx.QueryRelationToMany<Person, Trait>(_entities[2].relations[0]);
}

/// [Trait] entity fields to define ObjectBox queries.
class Trait_ {
  /// See [Trait.id].
  static final id = obx.QueryIntegerProperty<Trait>(_entities[3].properties[0]);

  /// See [Trait.name].
  static final name =
      obx.QueryStringProperty<Trait>(_entities[3].properties[1]);

  /// See [Trait.description].
  static final description =
      obx.QueryStringProperty<Trait>(_entities[3].properties[2]);

  /// See [Trait.red].
  static final red = obx.QueryDoubleProperty<Trait>(_entities[3].properties[3]);

  /// See [Trait.green].
  static final green =
      obx.QueryDoubleProperty<Trait>(_entities[3].properties[4]);

  /// See [Trait.blue].
  static final blue =
      obx.QueryDoubleProperty<Trait>(_entities[3].properties[5]);

  /// See [Trait.alpha].
  static final alpha =
      obx.QueryDoubleProperty<Trait>(_entities[3].properties[6]);

  /// See [Trait.sortOrder].
  static final sortOrder =
      obx.QueryIntegerProperty<Trait>(_entities[3].properties[7]);

  /// See [Trait.lastModified].
  static final lastModified =
      obx.QueryDateNanoProperty<Trait>(_entities[3].properties[8]);
}
